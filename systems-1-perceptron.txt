JMP main
; -----------------------------------------------------------------------
; SCREEN SIZE: 255 x 255
; PERCEPTRON RESOLUTION: 30 x 30
; -----------------------------------------------------------------------
; USER INPUT
; SHAPE: 0 --> rect | 1 --> circle
SHAPE: DW 0
HEIGHT: DW 30
WIDTH: 	DW 30
; BIAS was chosen during perceptron 
; training and should be respected
BIAS: DW 5
diameter: DW 2
rwidth: DW 15
rheight: DW 15
pos_x: DW 10
pos_y: DW 10
; -----------------------------------------------------------------------

; FRAME OF REFRERNCE: 
; Zero coordinate is moved to positive 30 to
; convert all negative values of trained model
; matrix to positive
WEIGHTS: DB "\x01\x82\x01\xC2\x01\x95\x01\x2D\x01\xE9\x01\x97\x01\x60\x01\x91\x01\xB4\x01\x7D\x01\xBD\x01\x81\x01\xA7\x01\x8B\x01\x95\x01\x9A\x01\x7C\x01\x94\x01\x97\x01\x95\x01\x76\x01\x86\x01\x95\x01\x95\x01\x99\x01\x8B\x01\x96\x01\x8E\x01\x8D\x01\xA0\x01\x80\x01\x71\x01\xC4\x01\x9B\x01\x98\x01\x65\x01\xD6\x01\x7C\x01\x86\x01\x8F\x01\x8C\x01\x5D\x01\x8A\x01\x86\x01\x8C\x01\x9E\x01\x9A\x01\x9D\x01\x89\x01\x7F\x01\x85\x01\xA3\x01\x9B\x01\x86\x01\x8E\x01\x87\x01\x90\x01\x9A\x01\x91\x01\x95\x01\xD8\x01\x71\x01\x71\x01\xAF\x01\x6A\x01\x72\x01\xAF\x01\x7D\x01\x98\x01\xB7\x01\x6E\x01\x88\x01\x77\x01\xAD\x01\x92\x01\x7E\x01\x83\x01\x83\x01\x9F\x01\x9D\x01\xA2\x01\x96\x01\x83\x01\x93\x01\x88\x01\x95\x01\x93\x01\x8F\x01\x8D\x01\x95\x01\x7F\x01\xAC\x01\x7F\x01\xAF\x01\x48\x01\xE4\x01\x66\x01\x89\x01\x89\x01\x84\x01\x96\x01\xA5\x01\x95\x01\x98\x01\x7C\x01\x9D\x01\x96\x01\x8E\x01\x91\x01\x8E\x01\x87\x01\x9A\x01\x91\x01\x97\x01\x8E\x01\x90\x01\x8D\x01\x93\x01\x96\x01\x96\x01\x4D\x01\xC0\x01\x8D\x01\xA6\x01\x7A\x01\x91\x01\x8D\x01\xA2\x01\xA9\x01\x77\x01\xAC\x01\x90\x01\x82\x01\x7D\x01\x7B\x01\xA3\x01\x82\x01\x9B\x01\x89\x01\x9E\x01\x99\x01\x83\x01\x94\x01\x90\x01\x80\x01\x90\x01\x93\x01\x95\x01\x83\x01\x97\x01\xBB\x01\x91\x01\x91\x01\x7F\x01\x9C\x01\x8D\x01\x89\x01\x6F\x01\x96\x01\x7E\x01\x7B\x01\xA4\x01\x8F\x01\xBD\x01\x7C\x01\x67\x01\xA5\x01\x8C\x01\x88\x01\x8C\x01\x8E\x01\x88\x01\x80\x01\x9B\x01\xA4\x01\x7F\x01\x8A\x01\x96\x01\x91\x01\x99\x01\xAC\x01\x34\x01\xBF\x01\x87\x01\xC9\x01\x7A\x01\xAD\x01\x57\x01\xBC\x01\x6C\x01\x9A\x01\x73\x01\x94\x01\x8F\x01\xBE\x01\x82\x01\x9F\x01\x79\x01\x9B\x01\x94\x01\x9C\x01\x70\x01\x99\x01\x7C\x01\x85\x01\x98\x01\x94\x01\x92\x01\x86\x01\x98\x01\x46\x01\x9E\x01\xE0\x01\x27\x01\xD2\x01\x5D\x01\xA4\x01\xC9\x01\x96\x01\x7F\x01\x92\x01\x84\x01\xAE\x01\x70\x01\x80\x01\x92\x01\x89\x01\xA1\x01\x9A\x01\x67\x01\x9C\x01\xAF\x01\x86\x01\x93\x01\x8A\x01\x90\x01\x93\x01\x93\x01\x95\x01\xA4\x01\xB3\x01\x73\x01\x79\x01\x7D\x01\x8E\x01\x93\x01\x95\x01\x8C\x01\x7D\x01\x9F\x01\xA9\x01\xB6\x01\x50\x01\x87\x01\x80\x01\xB0\x01\x92\x01\x93\x01\x71\x01\x87\x01\x9A\x01\x8D\x01\x90\x01\x99\x01\x7F\x01\x90\x01\x83\x01\x94\x01\x96\x01\x96\x01\xD4\x01\x86\x01\x3F\x01\xC3\x01\x61\x01\x9E\x01\x98\x01\xB8\x01\x76\x01\x8C\x01\xB0\x01\x64\x01\x87\x01\x7B\x01\xDB\x01\x77\x01\x80\x01\x7F\x01\xB0\x01\xA9\x01\x6D\x01\x8E\x01\x93\x01\x88\x01\x9D\x01\x89\x01\x93\x01\x8B\x01\x84\x01\xA0\x01\x35\x01\xC7\x01\x74\x01\xD3\x01\x8A\x01\xB8\x01\x70\x01\x7E\x01\x72\x01\x8D\x01\x9B\x01\xA1\x01\xB4\x01\x93\x01\x9A\x01\x86\x01\x6B\x01\xCE\x01\x69\x01\x76\x01\x9E\x01\x85\x01\x90\x01\x8F\x01\x98\x01\x88\x01\x84\x01\x91\x01\x97\x01\x95\x01\x75\x01\xB9\x01\x8A\x01\x7E\x01\x6D\x01\x8F\x01\x9F\x01\xBB\x01\x77\x01\xC8\x01\x6F\x01\x9C\x01\xA3\x01\x83\x01\x4F\x01\xA9\x01\x8C\x01\x9E\x01\x7E\x01\xA4\x01\xA2\x01\x89\x01\x90\x01\x95\x01\x7B\x01\x9B\x01\xA7\x01\x87\x01\x93\x01\x96\x01\xDF\x01\x58\x01\xA0\x01\x9A\x01\x9F\x01\x99\x01\x5C\x01\x94\x01\x6E\x01\xAB\x01\x76\x01\x7C\x01\xB7\x01\x88\x01\x8D\x01\x70\x01\xA6\x01\x91\x01\x85\x01\xA3\x01\x75\x01\x9A\x01\x9E\x01\x99\x01\x8A\x01\x9B\x01\x94\x01\x94\x01\x8A\x01\x95\x01\x9B\x01\x4B\x01\xBB\x01\x7C\x01\x73\x01\xA5\x01\xB8\x01\xA7\x01\x88\x01\x7F\x01\xA9\x01\x81\x01\x71\x01\xD1\x01\xB2\x01\x70\x01\x95\x01\xA2\x01\x8B\x01\x92\x01\xA0\x01\x89\x01\x92\x01\x81\x01\x9C\x01\x89\x01\x8C\x01\x85\x01\x7A\x01\xD1\x01\x77\x01\x9A\x01\x85\x01\xA5\x01\xC1\x01\x64\x01\x78\x01\x5D\x01\xA1\x01\x73\x01\x8B\x01\xA2\x01\x83\x01\x96\x01\x85\x01\xCF\x01\x79\x01\x7B\x01\xCA\x01\x69\x01\x8B\x01\x85\x01\x9E\x01\x9A\x01\x8C\x01\x88\x01\x9D\x01\x89\x01\x9B\x01\xA9\x01\x9E\x01\x73\x01\xAC\x01\x83\x01\x72\x01\x91\x01\x87\x01\xB5\x01\xC8\x01\x93\x01\x72\x01\x6F\x01\x8D\x01\x74\x01\x9C\x01\x94\x01\xB5\x01\x73\x01\x6F\x01\x93\x01\xB1\x01\x85\x01\x80\x01\x75\x01\xA9\x01\x89\x01\x96\x01\x8D\x01\x90\x01\x95\x01\xC3\x01\x85\x01\x9C\x01\x99\x01\xC3\x01\x91\x01\x83\x01\x97\x01\x2D\x01\xB5\x01\x7B\x01\x9C\x01\xB8\x01\x9E\x01\x79\x01\xA0\x01\x9F\x01\x62\x01\xAE\x01\x9E\x01\x7F\x01\x84\x01\xB5\x01\x98\x01\x86\x01\x8D\x01\x75\x01\x96\x01\x9A\x01\xBF\x01\x83\x01\x87\x01\x7C\x01\x6B\x01\x8D\x01\x9C\x01\xA1\x01\x8C\x01\xCD\x01\x6D\x01\xB9\x01\x98\x01\x90\x01\xA1\x01\x72\x01\x86\x01\x8D\x01\xAE\x01\x9D\x01\x61\x01\x96\x01\x91\x01\x89\x01\x79\x01\x95\x01\xA7\x01\x98\x01\x94\x01\x90\x01\x95\x01\x66\x01\xCF\x01\x8D\x01\x9D\x01\xA2\x01\x86\x01\xB0\x01\x5A\x01\x86\x01\x88\x01\xD1\x01\x6C\x01\x93\x01\x7B\x01\x9F\x01\x7E\x01\x8C\x01\x95\x01\x78\x01\xD5\x01\x6C\x01\x90\x01\x9B\x01\x8F\x01\x8C\x01\x8D\x01\x91\x01\x91\x01\x95\x01\x97\x01\x8D\x01\x88\x01\x63\x01\xA9\x01\xA9\x01\x60\x01\x91\x01\x9C\x01\xB3\x01\x76\x01\x61\x01\xAD\x01\x86\x01\xA4\x01\xA4\x01\x9A\x01\xA3\x01\xA2\x01\x60\x01\x73\x01\xAC\x01\x9E\x01\x7F\x01\x90\x01\x98\x01\x95\x01\x90\x01\x8B\x01\x8C\x01\xA1\x01\x66\x01\x8D\x01\xC3\x01\x88\x01\x98\x01\x9E\x01\x97\x01\x8C\x01\x80\x01\xA6\x01\x8D\x01\xC0\x01\x70\x01\x96\x01\x70\x01\x99\x01\x6F\x01\xA9\x01\x94\x01\x8A\x01\xB2\x01\x77\x01\x8A\x01\x93\x01\x97\x01\x8D\x01\x8E\x01\x9B\x01\x87\x01\x95\x01\xC5\x01\x7D\x01\x97\x01\x85\x01\x69\x01\x71\x01\x8B\x01\xCD\x01\x78\x01\xB1\x01\x71\x01\x8A\x01\xB3\x01\x78\x01\xC2\x01\x76\x01\x69\x01\x8B\x01\xB3\x01\x96\x01\x81\x01\x9F\x01\xB0\x01\x8E\x01\x81\x01\x89\x01\xA1\x01\x81\x01\x94\x01\x98\x01\xA2\x01\x9D\x01\x73\x01\x97\x01\x83\x01\xDA\x01\x88\x01\x91\x01\x88\x01\x8F\x01\x8E\x01\x8E\x01\x73\x01\x9A\x01\x78\x01\xA3\x01\x9C\x01\xA6\x01\xB4\x01\x70\x01\xA1\x01\x8D\x01\x79\x01\x99\x01\x99\x01\x90\x01\x86\x01\x7F\x01\x9C\x01\xAD\x01\x46\x01\xAA\x01\x84\x01\xA5\x01\xB1\x01\x8F\x01\x89\x01\x7E\x01\x9D\x01\x90\x01\x8F\x01\x8C\x01\xA5\x01\x87\x01\x9A\x01\xAC\x01\x95\x01\x70\x01\x65\x01\x95\x01\x9F\x01\x9A\x01\x86\x01\x85\x01\x81\x01\xA5\x01\x96\x01\x91\x01\x7E\x01\x97\x01\xB6\x01\xCB\x01\x99\x01\x64\x01\x79\x01\x8A\x01\x87\x01\x92\x01\xA1\x01\x77\x01\xD0\x01\x5D\x01\x89\x01\x91\x01\xAE\x01\x60\x01\xA7\x01\xC8\x01\x89\x01\xA2\x01\x98\x01\x6C\x01\xA1\x01\x83\x01\xA6\x01\x92\x01\x87\x01\x97\x01\x95\x01\x95\x01\x85\x01\x14\x01\x8D\x01\xAC\x01\xA2\x01\x9D\x01\x79\x01\x80\x01\xBA\x01\x71\x01\x7A\x01\x99\x01\xC7\x01\x9D\x01\x7F\x01\xAA\x01\x8A\x01\x60\x01\x97\x01\x8F\x01\x79\x01\x92\x01\x9B\x01\x9C\x01\x8C\x01\x8C\x01\x8E\x01\x8D\x01\x98\x01\x98\x01\xFD\x01\x62\x01\xF2\x01\x38\x01\x83\x01\x99\x01\x8B\x01\x89\x01\xA3\x01\x7E\x01\x9C\x01\xB9\x01\x7F\x01\x69\x01\x76\x01\x94\x01\x90\x01\x87\x01\x95\x01\x9A\x01\x94\x01\xB0\x01\x7E\x01\xA0\x01\x81\x01\x9C\x01\x91\x01\x8C\x01\x8B\x01\x95\x01\x64\x01\x77\x01\xBD\x01\x9D\x01\x6E\x01\x9D\x01\xAA\x01\xAA\x01\x7B\x01\xB4\x01\x96\x01\x55\x01\xB6\x01\x95\x01\x93\x01\x9B\x01\x9D\x01\x97\x01\x7A\x01\x87\x01\x99\x01\x83\x01\x8C\x01\x98\x01\x8C\x01\x90\x01\x8C\x01\x98\x01\x95\x01\x96\x01\xBA\x01\xE1\x01\x15\x01\xB6\x01\xB2\x01\x8C\x01\x84\x01\x8A\x01\x6B\x01\xA0\x01\x8C\x01\x87\x01\xB8\x01\x7A\x01\xAC\x01\x93\x01\x79\x01\xA0\x01\xA3\x01\x8E\x01\x83\x01\x9B\x01\x97\x01\x83\x01\x94\x01\x8E\x01\x90\x01\x92\x01\x89\x01\x96\x01\x49\x01\xAF\x01\x70\x01\xAA\x01\x7C\x01\x75\x01\x6D\x01\xB7\x01\x98\x01\x90\x01\x7C\x01\xB8\x01\x2D\x01\xAB\x01\x77\x01\x7A\x01\x8F\x01\x7D\x01\x8A\x01\x98\x01\x8E\x01\x9C\x01\x80\x01\x92\x01\x92\x01\x8C\x01\x90\x01\x96\x01\x90\x01\x95"
weight_index: DW 0

INPUTS: DB "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
input_index: DW 0
input_value: DW 0

center_x: DW 0
center_y: DW 0

cpos_y:  DW 0
cpos_x:  DW 0

dpos_y: DW 0
dpos_x: DW 0

i: DW 0
j: DW 0

output: DW 0
mode: DW 1

; -----------------------------------------------------------------------
; function draw_rect_final()
; -----------------------------------------------------------------------
draw_rect_final:
	MOV [pos_x] , 107
    MOV [pos_y] , 107
    MOV [i] , 0
    MOV [j] , 0
    MOV [cpos_x] , 107
    MOV [cpos_y] , 107
    MOV [diameter] , 40
    MOV [mode] , 0
	CALL draw_rect
	RET
; -----------------------------------------------------------------------
; function draw_circle_final()
; -----------------------------------------------------------------------
draw_circle_final:
	MOV [pos_x] , 107
    MOV [pos_y] , 107
    MOV [i] , 0
    MOV [j] , 0
    MOV [cpos_x] , 107
    MOV [cpos_y] , 107
    MOV [diameter] , 40
    MOV [mode] , 0
	CALL draw_circle
	RET
; -----------------------------------------------------------------------
; function display_output()
; adjustment for frame of reference change 0 -> 30
; -----------------------------------------------------------------------
display_output:
	MOV A , [BIAS]
    ADD A , 400
    MOV [BIAS] , A

	MOV A , [output]
    DIV 10
    MOV [output] , A
    
    CMP A , [BIAS] ; A > BIAS --> RECTANGLE
	JA test_complement_r
    JNA output_circle
    
test_complement_r:
	CMP A , 0xf800 ; A > -2040 two's complement
    JA output_rectangle
    JNA output_circle

output_circle:
	CALL draw_circle_final
	RET
    
output_rectangle:
	CALL draw_rect_final
	RET
; -----------------------------------------------------------------------
; function get_weight_from_index()
; -----------------------------------------------------------------------
get_weight_from_index:
	MOV B , WEIGHTS ; weights address
    MOV A , [weight_index]
    MUL 2
    ADD A , B
    MOV B , [A]
    MOV A , B
    RET
; -----------------------------------------------------------------------
; function get_input_from_index()
; -----------------------------------------------------------------------
get_input_from_index:
	MOV B , INPUTS ; input address
    MOV A , [input_index]
    MUL 2
    ADD A , B
    MOV B , [A]
    MOV A , B
    RET
; -----------------------------------------------------------------------
; function feed_forward_loop()
; output += inputs * weights
; -----------------------------------------------------------------------
feed_forward_loop:
	MOV A , [i]
    CMP A , [j]
    JAE feed_forward_loop_return
    
    MOV A , [i]
    MOV [input_index] , A
    CALL get_input_from_index
    MOV C , A ; C = input
    
    MOV A , [i]
    MOV [weight_index] , A
    CALL get_weight_from_index
    MOV D , A ; D = weight
    
    MOV A , C
    MUL D ; A = inputs * weights
    
  	MOV B , [output]
    ADD A , B
    
    MOV [output] , A
    
    MOV A , [i] ; i++
    INC A
    MOV [i] , A

	JMP feed_forward_loop
feed_forward_loop_return:
	RET
; -----------------------------------------------------------------------
; function feed_forward()
; -----------------------------------------------------------------------
feed_forward:
	MOV A , [WIDTH]
    MUL [HEIGHT]
	MOV [j] , A
    MOV [i] , 0
    
    CALL feed_forward_loop
    CALL display_output
    
	RET
; -----------------------------------------------------------------------
; function draw_line_from_inputs()
; -----------------------------------------------------------------------
draw_line_from_inputs:
	MOV A , [dpos_x]
    CMP A , [WIDTH]
    JAE draw_line_from_inputs_return
    
    CALL get_input_from_index ; A = value at index
    CMP A , 0
    JE skip_line_pixel
    
   	MOV B , [dpos_y]
    MOVB AH , BL
    MOV B , [dpos_x]
    MOVB AL, BL
    OUT 8
    MOV A , 60
    OUT 9
    
skip_line_pixel:
	MOV A , [input_index] ; input_index++
    INC A
    MOV [input_index] , A
    
    MOV A , [dpos_x] ; j++
    INC A
    MOV [dpos_x] , A
    
	JMP draw_line_from_inputs
draw_line_from_inputs_return:
	RET
; -----------------------------------------------------------------------
; function draw_from_inputs()
; -----------------------------------------------------------------------
draw_from_inputs:
	MOV A , [dpos_y]
    CMP A , [HEIGHT]
    JAE draw_from_inputs_return
    
    CALL draw_line_from_inputs
    
    MOV A , [dpos_y] ; i++
    INC A
    MOV [dpos_y] , A
    
    MOV [dpos_x] , 0
    
    JMP draw_from_inputs
draw_from_inputs_return:
	RET
; -----------------------------------------------------------------------
; function calculate_input_index()
; function maps matrix to 1D array indicies in row-major order:
; index = i * m + j
;
; index = pos_y * WIDTH + pos_x
; -----------------------------------------------------------------------
calculate_input_index:
	MOV A , [pos_y]
    MUL [WIDTH]
    MOV B , [pos_x]
    ADD A , B
	RET
; -----------------------------------------------------------------------
; function modify_input_at_index()
; -----------------------------------------------------------------------
modify_input_at_index:
	MOV B , INPUTS ; inputs address
	MOV A , [input_index]
    MUL 2
    ADD A , B ; address at index
    MOV C , [input_value]
    MOV [A] , C
	RET
; -----------------------------------------------------------------------
; function calculate_center()
; -----------------------------------------------------------------------
calculate_center:
	MOV B , [cpos_x]
    MOV A , [diameter]
    DIV 2
    ADD A , B
    MOV [center_x] , A
    
    MOV B , [cpos_y]
    MOV A , [diameter]
    DIV 2
    ADD A , B
    MOV [center_y] , A
	RET
; -----------------------------------------------------------------------
; function draw_circle_segment()
; -----------------------------------------------------------------------
draw_circle_segment:
	MOV A , [j]
    CMP A , [diameter] ; j < diameter
    JA draw_circle_segment_return
    
    MOV A , [pos_x] ; (x1 - x2) * (x1 - x2)
    SUB A , [center_x] ; cpos_x + radius
    MUL A
    MOV B , A ; B = result
    
    MOV A , [pos_y] ; (y1 - y2) * (y1 - y2)
    SUB A , [center_y]
    MUL A
    
    ADD B , A ; B = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)
    
    MOV A , [diameter] ; A = radius * radius
    DIV 2
    MUL A
    
    CMP B , A
    JA skip_circle_pixel

    MOV B , [pos_y]
    MOVB AH , BL
    MOV B , [pos_x]
    MOVB AL, BL
    OUT 8
    MOV A , 255
    OUT 9
    
	MOV A , [mode]
    CMP A , 0
    JE skip_circle_pixel
    CALL calculate_input_index
    MOV [input_index] , A
    MOV A , 1
    MOV [input_value] , A
    CALL modify_input_at_index

skip_circle_pixel:
    MOV A , [pos_x] ; x++
    INC A
    MOV [pos_x] , A
    
    MOV A , [j]
    INC A
    MOV [j] , A
    JMP draw_circle_segment
draw_circle_segment_return:
	RET

; -----------------------------------------------------------------------
; function draw_circle()
; -----------------------------------------------------------------------
draw_circle:
	CALL calculate_center
	MOV A , 2
    OUT 7
    MOV A , 3
    OUT 7
draw_circle_loop:
	MOV A , [i]
	CMP A , [diameter] ; i < mdiameter
    JA draw_circle_end_loop 
    
    CALL draw_circle_segment
    MOV A , [pos_y]
    INC A
    MOV [pos_y] , A
    
    ; TEMP
    ;MOV B , [pos_y]
    ;MOVB AH , BL
    ;MOV B , [cpos_x]
    ;MOVB AL, BL
    ;OUT 8
    ;MOV A , 255
    ;OUT 9
    
    MOV [j] , 0 ; j = 0
    
    MOV A , [cpos_x]
    MOV [pos_x] , A ; x = constant x
    
    MOV A , [i] ; i++
    INC A
    MOV [i] , A
    JMP draw_circle_loop
draw_circle_end_loop:
	MOV [i] , 0
	RET

; -----------------------------------------------------------------------
; function draw_line_segment()
; -----------------------------------------------------------------------
draw_line_segment:
	MOV A , [j]
	CMP A , [rwidth]
    JA draw_line_segment_return
    
    MOV B , [pos_y]
    MOVB AH , BL
    MOV B , [pos_x]
    MOVB AL , BL
    OUT 8
    MOV A , 255
    OUT 9
    
    MOV A , [mode]
    CMP A , 0
    JE skip_line
    CALL calculate_input_index
    MOV [input_index] , A
    MOV A , 1
    MOV [input_value] , A
    CALL modify_input_at_index
skip_line:
    MOV A , [pos_x]
    INC A
    MOV [pos_x] , A
    
    MOV A , [j]
    INC A
    MOV [j] , A
    
    JMP draw_line_segment
draw_line_segment_return:
	MOV [j] , 0
	RET

; -----------------------------------------------------------------------
; function draw_rect()
; -----------------------------------------------------------------------
draw_rect:
	MOV A , 2
    OUT 7
    MOV A , 3
    OUT 7
draw_rect_loop:
	MOV A , [i]
	CMP A , [rheight]
    JA draw_rect_end_loop
    
    MOV A , [cpos_y]
    MOV [pos_x] , A
    CALL draw_line_segment
    
    MOV A , [pos_y]
    INC A
    MOV [pos_y] , A
    
    MOV A , [i]
    INC A
    MOV [i] , A
    
    JMP draw_rect_loop
draw_rect_end_loop:
	MOV [i] , 0
	RET
    
; -----------------------------------------------------------------------
; function init()
; ----------------------------------------------------------------------- 
; 
init:
	MOV A , [pos_x]
    MOV [cpos_x] , A
    MOV A , [pos_y]
    MOV [cpos_y] , A
    RET

main:
	MOV SP , 0x09FF
    CALL init
    MOV A , [SHAPE]
    CMP A , 0
    JE shape_rect
shape_rect:
	CALL draw_rect
    JMP continue
shape_circle:
	CALL draw_circle
 
continue:
    MOV [i] , 0
    MOV [j] , 0
    MOV [input_index] , 0
    CALL draw_from_inputs
    CALL feed_forward
	HLT

