JMP main

mdiameter: DW 49

center_x: DW 0
center_y: DW 0

mpos_x: DW 15
mpos_y: DW 15

cpos_y:  DW 0
cpos_x:  DW 0

i: DW 0
j: DW 0

; -----------------------------------------------------------------------
; function calculate_center()
; -----------------------------------------------------------------------
calculate_center:
	MOV B , [cpos_x]
    MOV A , [mdiameter]
    DIV 2
    ADD A , B
    MOV [center_x] , A
    
    MOV B , [cpos_y]
    MOV A , [mdiameter]
    DIV 2
    ADD A , B
    MOV [center_y] , A
	RET
; -----------------------------------------------------------------------
; function draw_circle_segment()
; -----------------------------------------------------------------------
draw_circle_segment:
	MOV A , [j]
    CMP A , [mdiameter] ; j < mdiameter
    JA draw_circle_segment_return
    
    ; radius = 25
    MOV A , [mpos_x] ; (x1 - x2) * (x1 - x2)
    SUB A , [center_x] ; cpos_x + radius
    MUL A
    MOV B , A ; B = result
    
    MOV A , [mpos_y] ; (y1 - y2) * (y1 - y2)
    SUB A , [center_x]
    MUL A
    
    ADD B , A ; B = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)
    
    MOV A , [mdiameter] ; A = radius * radius
    DIV 2
    MUL A
    
    CMP B , A
    JA skip_circle_pixel

    MOV B , [mpos_y]
    MOVB AH , BL
    MOV B , [mpos_x]
    MOVB AL, BL
    OUT 8
    MOV A , 255
    OUT 9
    
skip_circle_pixel:
    MOV A , [mpos_x] ; x++
    INC A
    MOV [mpos_x] , A
    
    MOV A , [j]
    INC A
    MOV [j] , A
    JMP draw_circle_segment
draw_circle_segment_return:
	RET

; -----------------------------------------------------------------------
; function draw_circle()
; -----------------------------------------------------------------------
draw_circle:
	CALL calculate_center
	MOV A , 2
    OUT 7
    MOV A , 3
    OUT 7
draw_circle_loop:
	MOV A , [i]
	CMP A , [mdiameter] ; i < mdiameter
    JA draw_circle_end_loop 
    
    CALL draw_circle_segment
    MOV A , [mpos_y]
    INC A
    MOV [mpos_y] , A
    
    MOV [j] , 0 ; j = 0
    
    MOV A , [cpos_x]
    MOV [mpos_x] , A ; x = constant x
    
    MOV A , [i] ; i++
    INC A
    MOV [i] , A
    JMP draw_circle_loop
draw_circle_end_loop:
	MOV [i] , 0
	RET

; -----------------------------------------------------------------------
; function draw_line_segment()
; -----------------------------------------------------------------------
draw_line_segment:
	MOV A , [j]
	CMP A , [mdiameter]
    JA draw_line_segment_return
    MOV B , [mpos_y]
    MOVB AH , BL
    MOV B , [mpos_x]
    MOVB AL , BL
    OUT 8
    MOV A , 255
    OUT 9
    MOV A , [mpos_x]
    INC A
    MOV [mpos_x] , A
    MOV A , [j]
    INC A
    MOV [j] , A
    JMP draw_line_segment
draw_line_segment_return:
	MOV [j] , 0
	RET

; -----------------------------------------------------------------------
; function draw_rect()
; -----------------------------------------------------------------------
draw_rect:
	MOV A , 2
    OUT 7
    MOV A , 3
    OUT 7
draw_rect_loop:
	MOV A , [i]
	CMP A , [mdiameter]
    JA draw_rect_end_loop
    MOV A , [cpos_y]
    MOV [mpos_x] , A
    CALL draw_line_segment
    MOV A , [mpos_y]
    INC A
    MOV [mpos_y] , A
    MOV A , [i]
    INC A
    MOV [i] , A
    JMP draw_rect_loop
draw_rect_end_loop:
	MOV [i] , 0
	RET
    
; -----------------------------------------------------------------------
; function init()
; ----------------------------------------------------------------------- 
; SCREEN SIZE: 255 x 255
; PERCEPTRON RESOLUTION: 20 x 20
; SCALED RESOLUTION 220 x 220
;
init:
	MOV A , [mpos_x]
    MOV [cpos_x] , A
    MOV A , [mpos_y]
    MOV [cpos_y] , A
    RET

main:
	MOV SP , 0x0FFF
    CALL init
	CALL draw_circle
	HLT
