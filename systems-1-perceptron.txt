JMP main

HEIGHT: DW 20
WIDTH: 	DW 20
SCALER: DW 11

; FRAME OF REFRERNCE: 
; Zero coordinate is moved to positive 30 to
; convert all negative values of trained model
; matrix to positive 

WEIGHTS: DB "\x00\x20\x00\x41\x00\x37\x00\x25\x00\x39\x00\x32\x00\x34\x00\x42\x00\x49\x00\x10\x00\x38\x00\x30\x00\x39\x00\x35\x00\x28\x00\x38\x00\x29\x00\x37\x00\x25\x00\x40\x00\x43\x00\x32\x00\x29\x00\x29\x00\x38\x00\x31\x00\x31\x00\x12\x00\x28\x00\x36\x00\x31\x00\x22\x00\x39\x00\x28\x00\x21\x00\x35\x00\x27\x00\x40\x00\x26\x00\x41\x00\x37\x00\x21\x00\x33\x00\x33\x00\x23\x00\x31\x00\x30\x00\x53\x00\x33\x00\x22\x00\x22\x00\x31\x00\x26\x00\x30\x00\x32\x00\x27\x00\x31\x00\x31\x00\x32\x00\x40\x00\x33\x00\x37\x00\x41\x00\x29\x00\x30\x00\x38\x00\x26\x00\x36\x00\x27\x00\x33\x00\x34\x00\x27\x00\x32\x00\x31\x00\x39\x00\x24\x00\x28\x00\x33\x00\x33\x00\x42\x00\x26\x00\x32\x00\x27\x00\x36\x00\x25\x00\x27\x00\x26\x00\x34\x00\x38\x00\x37\x00\x27\x00\x31\x00\x27\x00\x39\x00\x35\x00\x33\x00\x33\x00\x29\x00\x29\x00\x41\x00\x38\x00\x38\x00\x28\x00\x41\x00\x26\x00\x22\x00\x39\x00\x31\x00\x29\x00\x21\x00\x34\x00\x36\x00\x34\x00\x27\x00\x27\x00\x33\x00\x32\x00\x39\x00\x34\x00\x43\x00\x28\x00\x24\x00\x34\x00\x29\x00\x31\x00\x27\x00\x36\x00\x22\x00\x34\x00\x43\x00\x32\x00\x25\x00\x32\x00\x35\x00\x31\x00\x36\x00\x28\x00\x36\x00\x34\x00\x41\x00\x38\x00\x32\x00\x39\x00\x26\x00\x36\x00\x22\x00\x31\x00\x30\x00\x34\x00\x26\x00\x24\x00\x34\x00\x30\x00\x21\x00\x26\x00\x32\x00\x37\x00\x35\x00\x32\x00\x40\x00\x20\x00\x32\x00\x28\x00\x28\x00\x33\x00\x23\x00\x38\x00\x24\x00\x29\x00\x35\x00\x26\x00\x32\x00\x23\x00\x40\x00\x25\x00\x30\x00\x27\x00\x30\x00\x30\x00\x41\x00\x41\x00\x00\x00\x31\x00\x31\x00\x32\x00\x26\x00\x20\x00\x33\x00\x28\x00\x21\x00\x42\x00\x28\x00\x28\x00\x31\x00\x27\x00\x28\x00\x36\x00\x33\x00\x29\x00\x41\x00\x34\x00\x24\x00\x33\x00\x31\x00\x32\x00\x35\x00\x33\x00\x38\x00\x29\x00\x29\x00\x22\x00\x33\x00\x41\x00\x18\x00\x31\x00\x26\x00\x28\x00\x32\x00\x30\x00\x44\x00\x36\x00\x38\x00\x35\x00\x30\x00\x39\x00\x19\x00\x32\x00\x27\x00\x35\x00\x35\x00\x28\x00\x21\x00\x30\x00\x33\x00\x32\x00\x32\x00\x32\x00\x32\x00\x28\x00\x43\x00\x26\x00\x33\x00\x28\x00\x25\x00\x35\x00\x40\x00\x28\x00\x24\x00\x32\x00\x27\x00\x25\x00\x32\x00\x34\x00\x28\x00\x28\x00\x26\x00\x31\x00\x34\x00\x32\x00\x40\x00\x41\x00\x26\x00\x23\x00\x26\x00\x26\x00\x32\x00\x22\x00\x29\x00\x27\x00\x31\x00\x32\x00\x26\x00\x24\x00\x26\x00\x30\x00\x32\x00\x29\x00\x29\x00\x32\x00\x40\x00\x37\x00\x42\x00\x31\x00\x32\x00\x35\x00\x28\x00\x30\x00\x30\x00\x36\x00\x18\x00\x30\x00\x30\x00\x29\x00\x26\x00\x29\x00\x35\x00\x30\x00\x29\x00\x34\x00\x40\x00\x08\x00\x29\x00\x23\x00\x36\x00\x40\x00\x28\x00\x31\x00\x30\x00\x34\x00\x35\x00\x21\x00\x37\x00\x26\x00\x25\x00\x34\x00\x28\x00\x32\x00\x33\x00\x25\x00\x42\x00\x44\x00\x25\x00\x35\x00\x22\x00\x21\x00\x30\x00\x34\x00\x36\x00\x15\x00\x33\x00\x30\x00\x27\x00\x35\x00\x24\x00\x34\x00\x31\x00\x30\x00\x35\x00\x30\x00\x42\x00\x43\x00\x03\x00\x41\x00\x35\x00\x20\x00\x30\x00\x32\x00\x37\x00\x30\x00\x27\x00\x36\x00\x25\x00\x30\x00\x34\x00\x35\x00\x34\x00\x26\x00\x27\x00\x31\x00\x42\x00\x34\x00\x43\x00\x26\x00\x24\x00\x34\x00\x34\x00\x25\x00\x31\x00\x27\x00\x36\x00\x38\x00\x17\x00\x25\x00\x43\x00\x30\x00\x28\x00\x31\x00\x26\x00\x29\x00\x40\x00\x10\x00\x49\x00\x18\x00\x24\x00\x20\x00\x32\x00\x32\x00\x07\x00\x30\x00\x31\x00\x22\x00\x25\x00\x29\x00\x16\x00\x25\x00\x32\x00\x35\x00\x29\x00\x33\x00\x40"
weight_index: DW 0

INPUTS: DB "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
input_index: DW 0
input_value: DW 0

diameter: DW 5
mdiameter: DW 0

center_x: DW 0
center_y: DW 0

mpos_x: DW 0
mpos_y: DW 0

cpos_y:  DW 0
cpos_x:  DW 0

pos_x: DW 7
pos_y: DW 7

i: DW 0
j: DW 0

; -----------------------------------------------------------------------
; function modify_input_at_index()
; -----------------------------------------------------------------------
modify_input_at_index:
	MOV B , INPUTS ; inputs address
	MOV A , [input_index]
    MUL 2
    ADD A , B ; address at index
    MOV C , [input_value]
    MOV [A] , C
	RET
; -----------------------------------------------------------------------
; function get_weight_from_index()
; -----------------------------------------------------------------------
get_weight_from_index:
	MOV B , WEIGHTS ; weights address
    MOV A , [weight_index]
    MUL 2
    ADD A , B
    MOV B , [A]
    MOV A , B
    RET
; -----------------------------------------------------------------------
; function scale()
; -----------------------------------------------------------------------
scale:
	MOV A , [pos_x]
    MUL [SCALER]
    MOV [mpos_x] , A
    
    MOV A , [pos_y]
    MUL [SCALER]
    MOV [mpos_y] , A
    
    MOV A , [diameter]
    MUL [SCALER]
    MOV [mdiameter] , A
    
	RET 
; -----------------------------------------------------------------------
; function calculate_center()
; -----------------------------------------------------------------------
calculate_center:
	MOV B , [cpos_x]
    MOV A , [mdiameter]
    DIV 2
    ADD A , B
    MOV [center_x] , A
    
    MOV B , [cpos_y]
    MOV A , [mdiameter]
    DIV 2
    ADD A , B
    MOV [center_y] , A
	RET
; -----------------------------------------------------------------------
; function draw_circle_segment()
; -----------------------------------------------------------------------
draw_circle_segment:
	MOV A , [j]
    CMP A , [mdiameter] ; j < mdiameter
    JA draw_circle_segment_return
    
    MOV A , [mpos_x] ; (x1 - x2) * (x1 - x2)
    SUB A , [center_x] ; cpos_x + radius
    MUL A
    MOV B , A ; B = result
    
    MOV A , [mpos_y] ; (y1 - y2) * (y1 - y2)
    SUB A , [center_y]
    MUL A
    
    ADD B , A ; B = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)
    
    MOV A , [mdiameter] ; A = radius * radius
    DIV 2
    MUL A
    
    CMP B , A
    JA skip_circle_pixel

    MOV B , [mpos_y]
    MOVB AH , BL
    MOV B , [mpos_x]
    MOVB AL, BL
    OUT 8
    MOV A , 255
    OUT 9
    
    MOV [input_index] , 
    CALL modify_input_at_index
    
skip_circle_pixel:
    MOV A , [mpos_x] ; x++
    INC A
    MOV [mpos_x] , A
    
    MOV A , [j]
    INC A
    MOV [j] , A
    JMP draw_circle_segment
draw_circle_segment_return:
	RET

; -----------------------------------------------------------------------
; function draw_circle()
; -----------------------------------------------------------------------
draw_circle:
	CALL calculate_center
	MOV A , 2
    OUT 7
    MOV A , 3
    OUT 7
draw_circle_loop:
	MOV A , [i]
	CMP A , [mdiameter] ; i < mdiameter
    JA draw_circle_end_loop 
    
    CALL draw_circle_segment
    MOV A , [mpos_y]
    INC A
    MOV [mpos_y] , A
    
    ; TEMP
    ;MOV B , [mpos_y]
    ;MOVB AH , BL
    ;MOV B , [cpos_x]
    ;MOVB AL, BL
    ;OUT 8
    ;MOV A , 255
    ;OUT 9
    
    MOV [j] , 0 ; j = 0
    
    MOV A , [cpos_x]
    MOV [mpos_x] , A ; x = constant x
    
    MOV A , [i] ; i++
    INC A
    MOV [i] , A
    JMP draw_circle_loop
draw_circle_end_loop:
	MOV [i] , 0
	RET

; -----------------------------------------------------------------------
; function draw_line_segment()
; -----------------------------------------------------------------------
draw_line_segment:
	MOV A , [j]
	CMP A , [mdiameter]
    JA draw_line_segment_return
    MOV B , [mpos_y]
    MOVB AH , BL
    MOV B , [mpos_x]
    MOVB AL , BL
    OUT 8
    MOV A , 255
    OUT 9
    MOV A , [mpos_x]
    INC A
    MOV [mpos_x] , A
    MOV A , [j]
    INC A
    MOV [j] , A
    JMP draw_line_segment
draw_line_segment_return:
	MOV [j] , 0
	RET

; -----------------------------------------------------------------------
; function draw_rect()
; -----------------------------------------------------------------------
draw_rect:
	MOV A , 2
    OUT 7
    MOV A , 3
    OUT 7
draw_rect_loop:
	MOV A , [i]
	CMP A , [mdiameter]
    JA draw_rect_end_loop
    MOV A , [cpos_y]
    MOV [mpos_x] , A
    CALL draw_line_segment
    MOV A , [mpos_y]
    INC A
    MOV [mpos_y] , A
    MOV A , [i]
    INC A
    MOV [i] , A
    JMP draw_rect_loop
draw_rect_end_loop:
	MOV [i] , 0
	RET
    
; -----------------------------------------------------------------------
; function init()
; ----------------------------------------------------------------------- 
; SCREEN SIZE: 255 x 255
; PERCEPTRON RESOLUTION: 20 x 20
; SCALED RESOLUTION 220 x 220
; 
init:
	CALL scale
	MOV A , [mpos_x]
    MOV [cpos_x] , A
    MOV A , [mpos_y]
    MOV [cpos_y] , A
    RET

main:
	MOV SP , 0x0FFF
    CALL init
	CALL draw_circle
    CALL get_weight_from_index
	HLT
